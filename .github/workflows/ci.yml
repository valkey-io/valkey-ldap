name: CI

on:
  push:
    branches:
      - main
      - 1.0
  pull_request:

jobs:
  clang-format-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run cargo format check
        id: rust-format-check
        run: |
          cargo fmt --check
          if [ $? -ne 0 ]; then
            echo "Rust code is not formatted correctly. Please run 'cargo fmt' to format your code."
            exit 1
          fi

  tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        valkey_version: ["7.2", "8.0", "8.1"]
    env:
      PYTHONUNBUFFERED: 1
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Change rust toolchain to 1.87.0
        run: rustup override set 1.87.0

      - name: Check if only the relevant files for testing the module are changed
        id: filter
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            CHANGED=$(git diff --name-only origin/${{ github.base_ref }}...${{ github.sha }})
          else
            CHANGED=$(git diff --name-only ${{ github.sha }}~1 ${{ github.sha }})
          fi

          CODE_CHANGED=false
          for file in $CHANGED; do
            if [[ "$file" =~ ^test/ || "$file" =~ ^src/ || "$file" =~ ^Cargo || "$file" =~ ^.github/workflows/ci.yml || "$file" =~ ^.github/workflows/cargo-format.yml || "$file" =~ ^scripts/start_valkey || "$file" =~ ^scripts/stop_valkey ]]; then
              CODE_CHANGED=true
              break
            fi
          done
          echo "code_changed=$CODE_CHANGED" >> $GITHUB_OUTPUT

      - name: Skip job if no src or test files changed
        if: steps.filter.outputs.code_changed != 'true'
        run: |
          echo "No src or test files changed, skipping job."
          exit 0

      - name: Install dependencies
        if: steps.filter.outputs.code_changed == 'true'
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libssl-dev libldap-dev netcat-traditional docker-compose ldap-utils

      - name: Set up Python
        if: steps.filter.outputs.code_changed == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Install Python test dependencies
        if: steps.filter.outputs.code_changed == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r test/integration/requirements.txt

      - name: Build Rust module
        if: steps.filter.outputs.code_changed == 'true'
        run: cargo build

      - name: Start Valkey and LDAP services
        if: steps.filter.outputs.code_changed == 'true'
        run: ./scripts/start_valkey_ldap.sh ${{ matrix.valkey_version }}

      - name: Run Unit Tests
        if: steps.filter.outputs.code_changed == 'true'
        run: cargo test --features enable-system-alloc

      - name: Run Integration Tests
        if: steps.filter.outputs.code_changed == 'true'
        run: python3 -m pytest -v test/integration

      - name: Stop Valkey and LDAP services
        if: steps.filter.outputs.code_changed == 'true'
        run: ./scripts/stop_valkey_ldap.sh

